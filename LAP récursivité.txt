Sous programme récursif
        -> Fonction             | peut s'appeler elle-même
        -> procédure            |                  -> condition pour terminer les appels



Exercice 1:

1. La fonction récursive est f 
2. 
    - n = 0
    - 1
    - retourner(3 * f(n-1) + 1)
3. La fonction non-récursif est itérative.

Exercice 2:

1. 
    La fonction f : La fonction est inopérationnelle
    La fonction g : 
                    - Avec -2 : ça renvoie 2
                    - Avec 0 : ça renvoie 0
                    - Avec 3 : ça renvoie ERREUR
    La fonction h :
                    - Avec -2 : ERREUR 
                    - Avec 0 : ça renvoie 0
                    - Avec 3 : ça renvoie 3  -- ⚠  h ne pourra pas être appelée qu'avec des n >= 0  ⚠  --

2. Non, car l'appel récursif n'est pas la dernière action faite dans le programme

Exercice 3 :

1. Pour chaque programme on utilise 3 et on voit combien de 'Hello' on reçoit :

    - P1(3) : On a 1 'Hello'
    - P2(3) : On a 2 'Hello'

2. P1 est une fonction terminale car la dernière instruction est un appel récursif

Exercice 4 : 

fonction puissance(x : entier, n : entier) : entier
/* Fonction qui calcule recursivement x**n  */
debut 
    si (n = o) alors:
        retourner(1)
    sinon
        retourner(x * puissance(x, n - 1))
    fsi
fin

Exercie 5 :

type tableau = tableau[1..Max] de type entier 

fonction somme(tab : tableau, n : entier) : entier
/* Somme récursive des éléments du tableau tab */
debut 
    si n = 0  alors:
        retourner(0)
    sinon 
        retourner(tab[n] + somme(tab, n + 1)) 
    fsi
fin

Exercice 6 :

fonction produit(t : tableau, n : entier): entier
/* Produit récursif de n éléments d'un tableau */
debut
    si n = 0 alors:
        retourner(1)
    sinon
        retourner(t[n] * produit(t, n - 1))
    fsi
fin

Exercice 7 : 

fonction recherche_dicho(x : entier, tab : tableau, debut : entier, fin : entier): entier
/* Fonction qui recherche recursivement un element x dans un tableau tab entre les positions debut et fin. Il lui renverra 
-1 si l'éléments pas trouvé */

var 
    milieu : entier
debut 
    si debut > fin alors: 
        retourner(-1)
    sinon
        milieu := (debut + fin) // 2
        si table[milieu] = x alors:
            retourner(milieu)
        sinon
            si x > table[milieu] alors:
                retourner(recherche_dicho(x, tab, milieu + 1, fin))
            sinon
                retourner(recherche_dicho(x, tab, debut, milieu - 1))
            fsi
        fsi
    fsi
fin

fonction factorielle(n : entier): entier 
debut 
    si n = 0 alors:
        retourner(1)
    sinon
        retourner(n * factorielle(n - 1))
    fsi
fin

